# Decrypted by LT | FUSCATOR
# Github: https://github.com/LunaticTunnel/Absurd 
# Updated for Ubuntu 24.04 & Debian 11+ - Self-contained OpenVPN Setup

export DEBIAN_FRONTEND=noninteractive

# Detect architecture
OS=$(uname -m)
MYIP=$(curl -sS ifconfig.me)
DOMAIN=$(cat /root/domain 2>/dev/null || echo "$MYIP")
MYIP2="s/xxxxxxxxx/$DOMAIN/g"

# Install required packages
function install_packages() {
    echo "Installing required packages..."
    apt update -y
    apt upgrade -y
    apt install -y openvpn easy-rsa wget curl unzip openssl net-tools \
                   procps iptables iproute2 apache2 apache2-bin apache2-utils \
                   ssl-cert ufw
    a2enmod ssl
    systemctl enable apache2
}

# Setup OpenVPN server certificates and keys
function setup_certificates() {
    echo "Setting up OpenVPN certificates..."
    
    # Create easy-rsa directory
    make-cadir /etc/openvpn/server/easy-rsa
    cd /etc/openvpn/server/easy-rsa
    
    # Initialize PKI
    ./easyrsa init-pki
    
    # Build CA (no password)
    echo "unique_subject = no" > pki/index.txt.attr
    echo -e "\n\n\n\n\n\n\n" | ./easyrsa build-ca nopass
    
    # Generate server certificate
    echo -e "\n\n\n\n\n\n\n" | ./easyrsa gen-req server nopass
    echo "yes" | ./easyrsa sign-req server server
    
    # Generate Diffie-Hellman parameters
    ./easyrsa gen-dh
    
    # Generate TLS auth key
    openvpn --genkey --secret ta.key
    
    # Copy all required files to server directory
    cp pki/ca.crt pki/issued/server.crt pki/private/server.key pki/dh.pem ta.key /etc/openvpn/server/
    
    echo "Certificates setup completed."
}

# Create OpenVPN server configurations
function create_server_configs() {
    echo "Creating OpenVPN server configurations..."
    
    # TCP Configuration
    cat > /etc/openvpn/server/server-tcp.conf <<'EOF'
port 1194
proto tcp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
tls-auth ta.key 0
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
verb 3
EOF

    # UDP Configuration
    cat > /etc/openvpn/server/server-udp.conf <<'EOF'
port 2200
proto udp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
tls-auth ta.key 0
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
verb 3
EOF

    echo "Server configurations created."
}

# Configure OpenVPN services
function config_easy() {
    echo "Configuring OpenVPN services..."
    
    # Copy PAM plugin (common location on modern systems)
    mkdir -p /usr/lib/openvpn/
    cp /usr/lib/*/openvpn/plugins/openvpn-plugin-auth-pam.so /usr/lib/openvpn/ 2>/dev/null || \
        cp /usr/lib/openvpn/plugins/openvpn-plugin-auth-pam.so /usr/lib/openvpn/ 2>/dev/null || true

    # Enable autostart
    sed -i 's/#AUTOSTART="all"/AUTOSTART="all"/g' /etc/default/openvpn

    # Enable and start OpenVPN via systemd (modern method)
    systemctl enable --now openvpn-server@server-tcp
    systemctl enable --now openvpn-server@server-udp

    # Restart (fallback)
    systemctl restart openvpn
}

# Generate client config files
function make_follow() {
    echo "Generating client configuration files..."
    
    # Enable IP forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf
    sysctl -p >/dev/null 2>&1

    # Create client OVPN files
    local configs=(
        "tcp.ovpn proto tcp remote xxxxxxxxx 1194"
        "udp.ovpn proto udp remote xxxxxxxxx 2200"
        "ws-ssl.ovpn proto tcp remote xxxxxxxxx 443"
        "ssl.ovpn proto tcp remote xxxxxxxxx 443"
    )

    for config in "${configs[@]}"; do
        read -r filename proto remote > /dev/null <<< "$config"
        cat > /etc/openvpn/$filename <<-END
client
dev tun
$proto
$remote
resolv-retry infinite
route-method exe
nobind
persist-key
persist-tun
auth-user-pass
comp-lzo
verb 3
END
        sed -i "$MYIP2" /etc/openvpn/$filename
    done
}

# Add CA cert and publish to web
function cert_ovpn() {
    local ca_cert="/etc/openvpn/server/ca.crt"
    if [[ ! -f "$ca_cert" ]]; then
        echo "❌ CA Certificate not found at $ca_cert"
        exit 1
    fi

    echo "Adding certificates to client configs and publishing to web..."

    local ovpn_files=("tcp.ovpn" "udp.ovpn" "ws-ssl.ovpn" "ssl.ovpn")
    for file in "${ovpn_files[@]}"; do
        echo '<ca>' >> "/etc/openvpn/$file"
        cat "$ca_cert" >> "/etc/openvpn/$file"
        echo '</ca>' >> "/etc/openvpn/$file"
        cp "/etc/openvpn/$file" "/var/www/html/$file"
    done

    # Special copy: ssl.ovpn = ws-ssl.ovpn in original script
    cp /etc/openvpn/ws-ssl.ovpn /var/www/html/ssl.ovpn

    # Create ZIP
    cd /var/www/html/
    zip -q Kyt-Project.zip tcp.ovpn udp.ovpn ssl.ovpn ws-ssl.ovpn
    cd ~

    # Create index.html
    cat > /var/www/html/index.html <<'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>OVPN Config Download</title>
    <meta name="description" content="OpenVPN Configs" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="theme-color" content="#000000" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet">
</head>
<body>
<div class="container justify-content-center" style="margin-top:9em;margin-bottom:5em;">
    <div class="col-md">
        <div class="view">
            <img src="https://openvpn.net/wp-content/uploads/openvpn.jpg" class="card-img-top">
            <div class="mask rgba-white-slight"></div>
        </div>
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Config List</h5><br />
                <ul class="list-group">
                    <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                        <p>TCP <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span></p>
                        <a class="btn btn-outline-success waves-effect btn-sm" href="http://DOMAIN:81/tcp.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                    </li>
                    <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                        <p>UDP <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span></p>
                        <a class="btn btn-outline-success waves-effect btn-sm" href="http://DOMAIN:81/udp.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                    </li>
                    <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                        <p>SSL <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span></p>
                        <a class="btn btn-outline-success waves-effect btn-sm" href="http://DOMAIN:81/ssl.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                    </li>
                    <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                        <p>WS SSL <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span></p>
                        <a class="btn btn-outline-success waves-effect btn-sm" href="http://DOMAIN:81/ws-ssl.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a>
                    </li>
                    <li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;">
                        <p>ALL.zip <span class="badge light-blue darken-4">All Devices</span></p>
                        <a class="btn btn-outline-success waves-effect btn-sm" href="http://DOMAIN:81/Kyt-Project.zip" style="float:right;"><i class="fa fa-download"></i> Download</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
</body>
</html>
EOF

    # Replace DOMAIN placeholder
    sed -i "s|DOMAIN|$DOMAIN|g" /var/www/html/index.html

    # Ensure Apache serves on port 81
    if ! grep -q "Listen 81" /etc/apache2/ports.conf; then
        echo "Listen 81" >> /etc/apache2/ports.conf
    fi

    cat > /etc/apache2/sites-available/81.conf <<EOF
<VirtualHost *:81>
    DocumentRoot /var/www/html
    <Directory /var/www/html>
        Require all granted
    </Directory>
</VirtualHost>
EOF

    a2ensite 81.conf >/dev/null 2>&1
    systemctl reload apache2
}

# Setup firewall
function setup_firewall() {
    echo "Setting up firewall rules..."
    
    # Allow necessary ports
    ufw allow ssh
    ufw allow 81/tcp
    ufw allow 1194/tcp
    ufw allow 2200/udp
    ufw allow 443/tcp
    
    # Enable IP forwarding in firewall
    echo 'net/ipv4/ip_forward=1' >> /etc/ufw/sysctl.conf
    
    # Add NAT rules
    echo "# START OPENVPN RULES" >> /etc/ufw/before.rules
    echo "# NAT table rules" >> /etc/ufw/before.rules
    echo "*nat" >> /etc/ufw/before.rules
    echo ":POSTROUTING ACCEPT [0:0]" >> /etc/ufw/before.rules
    echo "-A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE" >> /etc/ufw/before.rules
    echo "COMMIT" >> /etc/ufw/before.rules
    echo "# END OPENVPN RULES" >> /etc/ufw/before.rules
    
    # Enable UFW
    echo "y" | ufw enable
}

# Main installer
function install_ovpn() {
    echo "🚀 Installing OpenVPN for Ubuntu 24.04 / Debian 11+..."
    install_packages
    setup_certificates
    create_server_configs
    config_easy
    make_follow
    cert_ovpn
    setup_firewall
    systemctl enable openvpn
    systemctl restart openvpn
    echo "✅ OpenVPN installation completed."
    echo "📁 Configs available at: http://$DOMAIN:81"
    echo "🔑 Server IP: $MYIP"
    echo "🌐 Domain: $DOMAIN"
}

# Run installer
install_ovpn