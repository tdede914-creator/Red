#!/bin/bash
# OpenVPN Auto Installer (No Port Conflict)
# Safe for use with Nginx, HAProxy, Xray
# Ports: OpenVPN TCP=8080, UDP=8880
# Web: http://IP:81

export DEBIAN_FRONTEND=noninteractive

# Detect domain or use IP
DOMAIN=$(cat /root/domain 2>/dev/null | tr -d ' ')
if [ -z "$DOMAIN" ]; then
    DOMAIN=$(curl -sS ifconfig.me)
fi

# Replace placeholder in files
MYIP2="s/xxxxxxxxx/$DOMAIN/g"

# Directory
OPENVPN_DIR="/etc/openvpn/server"
EASY_RSA="/etc/openvpn/server/easy-rsa"

# Safe ports (avoid 80/443)
OPENVPN_TCP_PORT=8080
OPENVPN_UDP_PORT=8880

# Function: Install dependencies
install_packages() {
    echo "üîß Updating system and installing required packages..."
    apt update -y
    apt upgrade -y
    apt install -y openvpn easy-rsa wget curl unzip net-tools \
                   iptables apache2 apache2-bin apache2-utils ssl-cert
    a2enmod ssl
    systemctl enable apache2
}

# Function: Generate PKI & Certificates
generate_certificates() {
    echo "üîê Generating CA and server certificates..."

    make-cadir $EASY_RSA
    cd $EASY_RSA

    ./easyrsa init-pki
    ./easyrsa build-ca nopass << EOF
OpenVPN-CA
EOF

    ./easyrsa gen-req server nopass
    ./easyrsa sign-req server server << EOF
yes
EOF

    ./easyrsa gen-dh
    openvpn --genkey --secret $EASY_RSA/ta.key

    cp pki/ca.crt pki/issued/server.crt pki/private/server.key pki/dh.pem $EASY_RSA/ta.key $OPENVPN_DIR/
}

# Function: Create OpenVPN server configs (safe ports)
create_server_configs() {
    echo "‚öôÔ∏è Creating OpenVPN server configurations..."

    # TCP on 8080
    cat > $OPENVPN_DIR/server-tcp.conf << EOF
port $OPENVPN_TCP_PORT
proto tcp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 5 30
tls-auth ta.key 0
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
verb 3
explicit-exit-notify 1
EOF

    # UDP on 8880
    cat > $OPENVPN_DIR/server-udp.conf << EOF
port $OPENVPN_UDP_PORT
proto udp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 5 30
tls-auth ta.key 0
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
verb 3
explicit-exit-notify 1
EOF
}

# Function: Enable IP forwarding
enable_ip_forward() {
    echo "üîÅ Enabling IP forwarding..."
    echo 1 > /proc/sys/net/ipv4/ip_forward
    sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf
    sysctl -p >/dev/null 2>&1
}

# Function: Configure OpenVPN service
config_openvpn_service() {
    echo "üîÑ Configuring OpenVPN service..."
    sed -i 's/#AUTOSTART="all"/AUTOSTART="all"/g' /etc/default/openvpn
    systemctl enable openvpn-server@server-tcp
    systemctl enable openvpn-server@server-udp
}

# Function: Create client OVPN profiles (safe ports)
create_client_configs() {
    echo "üì• Creating client .ovpn profiles..."

    local ca_cert="$OPENVPN_DIR/ca.crt"
    local configs=(
        "tcp.ovpn tcp $OPENVPN_TCP_PORT"
        "udp.ovpn udp $OPENVPN_UDP_PORT"
    )

    for config in "${configs[@]}"; do
        read -r filename proto port > /dev/null <<< "$config"
        cat > /etc/openvpn/$filename << EOF
client
dev tun
proto $proto
remote xxxxxxxxx $port
resolv-retry infinite
route-method exe
nobind
persist-key
persist-tun
auth-user-pass
comp-lzo
verb 3
EOF
        sed -i "$MYIP2" /etc/openvpn/$filename

        echo '<ca>' >> /etc/openvpn/$filename
        cat "$ca_cert" >> /etc/openvpn/$filename
        echo '</ca>' >> /etc/openvpn/$filename

        cp /etc/openvpn/$filename /var/www/html/
    done

    # ZIP all
    cd /var/www/html
    zip -q Kyt-Project.zip tcp.ovpn udp.ovpn
    cd ~
}

# Function: Setup web server on port 81
setup_web_server() {
    echo "üåê Setting up web server on port 81..."

    if ! grep -q "Listen 81" /etc/apache2/ports.conf; then
        echo "Listen 81" >> /etc/apache2/ports.conf
    fi

    cat > /etc/apache2/sites-available/81.conf << EOF
<VirtualHost *:81>
    DocumentRoot /var/www/html
    <Directory /var/www/html>
        Options FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>
</VirtualHost>
EOF

    a2ensite 81.conf >/dev/null 2>&1
    systemctl reload apache2
}

# Function: Create download page
create_web_page() {
    cat > /var/www/html/index.html << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>OVPN Config Download</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css">
    <style> body { background: #f8f9fa; padding: 20px; } .card { box-shadow: 0 4px 8px rgba(0,0,0,0.1); } </style>
</head>
<body>
<div class="container">
    <div class="col-md-8 mx-auto">
        <div class="text-center mb-4">
            <img src="https://openvpn.net/wp-content/uploads/openvpn.jpg" width="200" class="rounded">
        </div>
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">üì• Download OpenVPN Config</h5><br>
                <ul class="list-group">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        TCP $OPENVPN_TCP_PORT <span class="badge badge-primary">All Devices</span>
                        <a href="http://$DOMAIN:81/tcp.ovpn" class="btn btn-sm btn-success"><i class="fa fa-download"></i> Download</a>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        UDP $OPENVPN_UDP_PORT <span class="badge badge-primary">All Devices</span>
                        <a href="http://$DOMAIN:81/udp.ovpn" class="btn btn-sm btn-success"><i class="fa fa-download"></i> Download</a>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        ZIP (All) <span class="badge badge-danger">Full Pack</span>
                        <a href="http://$DOMAIN:81/Kyt-Project.zip" class="btn btn-sm btn-danger"><i class="fa fa-download"></i> Download</a>
                    </li>
                </ul>
            </div>
        </div>
        <p class="text-center mt-4 text-muted">Config generated for $DOMAIN</p>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js"></script>
</body>
</html>
EOF
}

# Function: Start OpenVPN
start_openvpn() {
    echo "üöÄ Starting OpenVPN services..."
    systemctl daemon-reexec
    systemctl start openvpn-server@server-tcp
    systemctl start openvpn-server@server-udp
}

# Final function
main() {
    echo "üöÄ Installing OpenVPN (Safe Ports: 8080 & 8880)"
    install_packages
    generate_certificates
    create_server_configs
    enable_ip_forward
    config_openvpn_service
    create_client_configs
    setup_web_server
    create_web_page
    start_openvpn

    echo "‚úÖ OpenVPN Installed Successfully!"
    echo "üåê Configs: http://$DOMAIN:81"
    echo "üîå Ports: TCP=8080, UDP=8880 (safe for Nginx/HAProxy)"
}

# Run
main